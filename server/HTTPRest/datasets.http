
@host = localhost
@port= 3000


##########################################
## DATASETS                             ##
##########################################

### POST datasets from sparql endpoint 
## organisation / 2710000
POST http://{{host}}:{{port}}/api/data
content-type: application/json

{
    "domain": "organisation", 
    "rows": 2710000
}

### work / 2950000
POST http://{{host}}:{{port}}/api/data
content-type: application/json

{
    "domain": "work", 
    "rows": 2950000
}

### person / 31150000
POST http://{{host}}:{{port}}/api/data
content-type: application/json

{
    "domain": "person", 
    "rows": 1000
}

### POST generate SPARQL query from JSON
POST http://{{host}}:{{port}}/api/data/query
content-type: application/json

{
    "domain": "work"
}


##########################################
## STATS                                ##
##########################################

### POST generate diff stats for a given ?domain 
POST http://{{host}}:{{port}}/api/dpp/stats
content-type: application/json

{
    "domain": "work"
}


### POST generate synonym sets for >> diff stats for a given ?domain 
POST http://{{host}}:{{port}}/api/dpp/distinct
content-type: application/json

{
    "domain": "work"
}


### POST generate diff stats for a given ?domain 
POST http://{{host}}:{{port}}/api/dpp/stats
content-type: application/json

{
    "domain": "organisation"
}


### POST generate synonym sets for >> diff stats for a given ?domain 
POST http://{{host}}:{{port}}/api/dpp/distinct
content-type: application/json

{
    "domain": "organisation"
}

### POST generate diff stats for a given ?domain 
POST http://{{host}}:{{port}}/api/dpp/stats
content-type: application/json

{
    "domain": "person"
}


### POST generate synonym sets for >> diff stats for a given ?domain 
POST http://{{host}}:{{port}}/api/dpp/distinct
content-type: application/json

{
    "domain": "person"
}

##########################################
## pyLODQuMA                            ##
##########################################


### GET SYNS FROM GCP SERVER
GET http://34.142.115.49:105/synonyms/help

### GET SUGS FROM GCP SERVER
GET http://34.142.115.49:105/suggest/help


##########################################
## SYNONYMS                             ##
##########################################


### POST Create Synonyms dictionary for a give distinc predicates collection
POST http://{{host}}:{{port}}/api/synonyms/dictionary
content-type: application/json

{
    "domain": "work"
}
###
POST http://{{host}}:{{port}}/api/synonyms/dictionary
content-type: application/json

{
    "domain": "person"
}

### POST save the distinct predicate values into new document
POST http://{{host}}:{{port}}/api/synonyms/saveDistinct
content-type: application/json

{
    "domain": "person"
}

### POST clean dictionary for a given domain and remove duplicated/unused synonyls sets
POST http://{{host}}:{{port}}/api/synonyms/clean
content-type: application/json

{
    "domain": "person"
}

### POST generate rare predicates for a given domain
POST http://{{host}}:{{port}}/api/synonyms/rare
content-type: application/json

{
    "domain": "person"
}


### POST Create QVCs (Quality Verification Cases), for a collection
POST http://{{host}}:{{port}}/api/synonyms/qvc
content-type: application/json

{
    "domain": "person"
}

### POST Save QVCs/ for each {predicate} in a  collection
POST http://{{host}}:{{port}}/api/synonyms/saveQVC
content-type: application/json

{
    "domain": "person"
}




### POST Show QVCs/ for each {predicate} in a  collection
POST http://{{host}}:{{port}}/api/synonyms/showQVC
content-type: application/json

{
    "domain": "person"
}






